plugins {
    id "fabric-loom" version "1.0.3"
    id "maven-publish"
}

version = project.mod_version
group = project.maven_group

task generateAssets(type: JavaExec) {
    group = "other"
    classpath = sourceSets.test.runtimeClasspath
    // noinspection all - janky intellij "exceeds access rights" warning
    mainClass = "io.ix0rai." + project.maven_group + ".datagen.AssetGenerator"
}

task validateAssets(type: JavaExec) {
    group = "other"
    classpath = sourceSets.test.runtimeClasspath
    // noinspection all - janky intellij "exceeds access rights" warning
    mainClass = "io.ix0rai." + project.maven_group + ".datagen.AssetValidator"
}

jar {
    dependsOn(validateAssets)
}

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release/" }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings}:intermediary-v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    // noinspection all
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = targetJavaVersion
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
